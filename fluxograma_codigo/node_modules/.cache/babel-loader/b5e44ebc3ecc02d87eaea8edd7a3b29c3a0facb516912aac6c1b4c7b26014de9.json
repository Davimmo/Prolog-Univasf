{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\davi2\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\fluxograma_c\\\\fluxograma_codigo\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Fluxograma from './components/Fluxograma';\nimport disciplinasData from './disciplinas';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [disciplinasCursadas, setDisciplinasCursadas] = useState([]);\n  const [disciplinasDisponiveis, setDisciplinasDisponiveis] = useState([]);\n\n  // Função para calcular a carga horária total do curso\n  const calcularCargaHorariaTotal = () => {\n    let total = 0;\n    Object.values(disciplinasData).forEach(disciplina => {\n      total += disciplina.cargaHoraria;\n    });\n    return total;\n  };\n\n  // Função para calcular a carga horária cursada\n  const calcularCargaHorariaCursada = () => {\n    let cursada = 0;\n    disciplinasCursadas.forEach(codigo => {\n      if (disciplinasData[codigo]) {\n        cursada += disciplinasData[codigo].cargaHoraria;\n      }\n    });\n    return cursada;\n  };\n\n  // Função para verificar se pode fazer estágio (50% da carga horária total)\n  const podeFazerEstagio = () => {\n    const cargaTotal = calcularCargaHorariaTotal();\n    const cargaCursada = calcularCargaHorariaCursada();\n    return cargaCursada / cargaTotal >= 0.5;\n  };\n\n  // Função para verificar se pode fazer TCC (70% da carga horária total)\n  const podeFazerTCC = () => {\n    const cargaTotal = calcularCargaHorariaTotal();\n    const cargaCursada = calcularCargaHorariaCursada();\n    return cargaCursada / cargaTotal >= 0.7;\n  };\n\n  // Função para verificar se todos os pré-requisitos de uma disciplina foram cursados\n  const verificarPreRequisitos = codigo => {\n    const disciplina = disciplinasData[codigo];\n    if (!disciplina) return false;\n\n    // Se não tem pré-requisitos, está disponível\n    if (disciplina.preRequisitos.length === 0) return true;\n\n    // Verifica se todos os pré-requisitos foram cursados\n    return disciplina.preRequisitos.every(preReq => disciplinasCursadas.includes(preReq));\n  };\n\n  // Função para verificar se todos os co-requisitos de uma disciplina foram cursados ou estão disponíveis\n  const verificarCoRequisitos = codigo => {\n    const disciplina = disciplinasData[codigo];\n    if (!disciplina) return false;\n\n    // Se não tem co-requisitos, está disponível\n    if (disciplina.coRequisitos.length === 0) return true;\n\n    // Verifica se todos os co-requisitos foram cursados ou estão disponíveis\n    return disciplina.coRequisitos.every(coReq => disciplinasCursadas.includes(coReq) || verificarPreRequisitos(coReq));\n  };\n\n  // Função para atualizar as disciplinas disponíveis\n  const atualizarDisciplinasDisponiveis = () => {\n    const disponiveis = [];\n    Object.keys(disciplinasData).forEach(codigo => {\n      // Se já foi cursada, não está disponível\n      if (disciplinasCursadas.includes(codigo)) return;\n\n      // Regras especiais para estágio e TCC\n      if (codigo === 'estagio') {\n        if (podeFazerEstagio()) {\n          disponiveis.push(codigo);\n        }\n        return;\n      }\n      if (codigo === 'TCC_1') {\n        if (podeFazerTCC()) {\n          disponiveis.push(codigo);\n        }\n        return;\n      }\n\n      // Verifica pré-requisitos e co-requisitos para as demais disciplinas\n      if (verificarPreRequisitos(codigo) && verificarCoRequisitos(codigo)) {\n        disponiveis.push(codigo);\n      }\n    });\n    setDisciplinasDisponiveis(disponiveis);\n  };\n\n  // Atualiza as disciplinas disponíveis quando as cursadas mudam\n  useEffect(() => {\n    atualizarDisciplinasDisponiveis();\n\n    // Salva no localStorage\n    localStorage.setItem('disciplinasCursadas', JSON.stringify(disciplinasCursadas));\n  }, [disciplinasCursadas]);\n\n  // Carrega as disciplinas cursadas do localStorage ao iniciar\n  useEffect(() => {\n    const savedDisciplinas = localStorage.getItem('disciplinasCursadas');\n    if (savedDisciplinas) {\n      setDisciplinasCursadas(JSON.parse(savedDisciplinas));\n    } else {\n      // Inicialmente, apenas as disciplinas sem pré-requisitos estão disponíveis\n      const inicialmenteDisponiveis = [];\n      Object.keys(disciplinasData).forEach(codigo => {\n        const disciplina = disciplinasData[codigo];\n        if (disciplina.preRequisitos.length === 0 && disciplina.coRequisitos.length === 0) {\n          inicialmenteDisponiveis.push(codigo);\n        }\n      });\n      setDisciplinasDisponiveis(inicialmenteDisponiveis);\n    }\n  }, []);\n\n  // Função para lidar com o clique em uma disciplina\n  const handleDisciplinaClick = codigo => {\n    if (disciplinasCursadas.includes(codigo)) {\n      // Se já está cursada, verifica se pode ser desmarcada\n      // Uma disciplina só pode ser desmarcada se nenhuma disciplina cursada depende dela\n      let podeDesmarcada = true;\n      disciplinasCursadas.forEach(discCursada => {\n        if (discCursada !== codigo) {\n          const dependencias = disciplinasData[discCursada].preRequisitos;\n          if (dependencias.includes(codigo)) {\n            podeDesmarcada = false;\n          }\n        }\n      });\n      if (podeDesmarcada) {\n        setDisciplinasCursadas(prev => prev.filter(disc => disc !== codigo));\n      } else {\n        alert(\"Não é possível desmarcar esta disciplina pois outras disciplinas cursadas dependem dela.\");\n      }\n    } else if (disciplinasDisponiveis.includes(codigo)) {\n      // Se está disponível, marca como cursada\n      setDisciplinasCursadas(prev => [...prev, codigo]);\n    } else {\n      // Se não está disponível, mostra os pré-requisitos faltantes ou regras especiais\n      if (codigo === 'estagio') {\n        alert(\"Para cursar Estágio Supervisionado, você precisa ter concluído pelo menos 50% da carga horária total do curso.\");\n        return;\n      }\n      if (codigo === 'TCC_1') {\n        alert(\"Para cursar TCC 1, você precisa ter concluído pelo menos 70% da carga horária total do curso.\");\n        return;\n      }\n      const preReqsFaltantes = disciplinasData[codigo].preRequisitos.filter(preReq => !disciplinasCursadas.includes(preReq)).map(preReq => disciplinasData[preReq].nome);\n      const coReqsFaltantes = disciplinasData[codigo].coRequisitos.filter(coReq => !disciplinasCursadas.includes(coReq) && !disciplinasDisponiveis.includes(coReq)).map(coReq => disciplinasData[coReq].nome);\n      let mensagem = \"Esta disciplina não está disponível. \";\n      if (preReqsFaltantes.length > 0) {\n        mensagem += `\\nPré-requisitos faltantes: ${preReqsFaltantes.join(\", \")}`;\n      }\n      if (coReqsFaltantes.length > 0) {\n        mensagem += `\\nCo-requisitos faltantes: ${coReqsFaltantes.join(\", \")}`;\n      }\n      alert(mensagem);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Fluxograma, {\n      disciplinas: disciplinasData,\n      disciplinasCursadas: disciplinasCursadas,\n      disciplinasDisponiveis: disciplinasDisponiveis,\n      onDisciplinaClick: handleDisciplinaClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/OyeaPdcm03BYk3THw6PFIkkZMM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Fluxograma","disciplinasData","jsxDEV","_jsxDEV","App","_s","disciplinasCursadas","setDisciplinasCursadas","disciplinasDisponiveis","setDisciplinasDisponiveis","calcularCargaHorariaTotal","total","Object","values","forEach","disciplina","cargaHoraria","calcularCargaHorariaCursada","cursada","codigo","podeFazerEstagio","cargaTotal","cargaCursada","podeFazerTCC","verificarPreRequisitos","preRequisitos","length","every","preReq","includes","verificarCoRequisitos","coRequisitos","coReq","atualizarDisciplinasDisponiveis","disponiveis","keys","push","localStorage","setItem","JSON","stringify","savedDisciplinas","getItem","parse","inicialmenteDisponiveis","handleDisciplinaClick","podeDesmarcada","discCursada","dependencias","prev","filter","disc","alert","preReqsFaltantes","map","nome","coReqsFaltantes","mensagem","join","className","children","fileName","_jsxFileName","lineNumber","columnNumber","disciplinas","onDisciplinaClick","_c","$RefreshReg$"],"sources":["C:/Users/davi2/OneDrive/Área de Trabalho/fluxograma_c/fluxograma_codigo/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Fluxograma from './components/Fluxograma';\nimport disciplinasData from './disciplinas';\n\nfunction App() {\n  const [disciplinasCursadas, setDisciplinasCursadas] = useState([]);\n  const [disciplinasDisponiveis, setDisciplinasDisponiveis] = useState([]);\n\n  // Função para calcular a carga horária total do curso\n  const calcularCargaHorariaTotal = () => {\n    let total = 0;\n    Object.values(disciplinasData).forEach(disciplina => {\n      total += disciplina.cargaHoraria;\n    });\n    return total;\n  };\n\n  // Função para calcular a carga horária cursada\n  const calcularCargaHorariaCursada = () => {\n    let cursada = 0;\n    disciplinasCursadas.forEach(codigo => {\n      if (disciplinasData[codigo]) {\n        cursada += disciplinasData[codigo].cargaHoraria;\n      }\n    });\n    return cursada;\n  };\n\n  // Função para verificar se pode fazer estágio (50% da carga horária total)\n  const podeFazerEstagio = () => {\n    const cargaTotal = calcularCargaHorariaTotal();\n    const cargaCursada = calcularCargaHorariaCursada();\n    return (cargaCursada / cargaTotal) >= 0.5;\n  };\n\n  // Função para verificar se pode fazer TCC (70% da carga horária total)\n  const podeFazerTCC = () => {\n    const cargaTotal = calcularCargaHorariaTotal();\n    const cargaCursada = calcularCargaHorariaCursada();\n    return (cargaCursada / cargaTotal) >= 0.7;\n  };\n\n  // Função para verificar se todos os pré-requisitos de uma disciplina foram cursados\n  const verificarPreRequisitos = (codigo) => {\n    const disciplina = disciplinasData[codigo];\n    if (!disciplina) return false;\n    \n    // Se não tem pré-requisitos, está disponível\n    if (disciplina.preRequisitos.length === 0) return true;\n    \n    // Verifica se todos os pré-requisitos foram cursados\n    return disciplina.preRequisitos.every(preReq => disciplinasCursadas.includes(preReq));\n  };\n\n  // Função para verificar se todos os co-requisitos de uma disciplina foram cursados ou estão disponíveis\n  const verificarCoRequisitos = (codigo) => {\n    const disciplina = disciplinasData[codigo];\n    if (!disciplina) return false;\n    \n    // Se não tem co-requisitos, está disponível\n    if (disciplina.coRequisitos.length === 0) return true;\n    \n    // Verifica se todos os co-requisitos foram cursados ou estão disponíveis\n    return disciplina.coRequisitos.every(coReq => \n      disciplinasCursadas.includes(coReq) || verificarPreRequisitos(coReq)\n    );\n  };\n\n  // Função para atualizar as disciplinas disponíveis\n  const atualizarDisciplinasDisponiveis = () => {\n    const disponiveis = [];\n    \n    Object.keys(disciplinasData).forEach(codigo => {\n      // Se já foi cursada, não está disponível\n      if (disciplinasCursadas.includes(codigo)) return;\n      \n      // Regras especiais para estágio e TCC\n      if (codigo === 'estagio') {\n        if (podeFazerEstagio()) {\n          disponiveis.push(codigo);\n        }\n        return;\n      }\n      \n      if (codigo === 'TCC_1') {\n        if (podeFazerTCC()) {\n          disponiveis.push(codigo);\n        }\n        return;\n      }\n      \n      // Verifica pré-requisitos e co-requisitos para as demais disciplinas\n      if (verificarPreRequisitos(codigo) && verificarCoRequisitos(codigo)) {\n        disponiveis.push(codigo);\n      }\n    });\n    \n    setDisciplinasDisponiveis(disponiveis);\n  };\n\n  // Atualiza as disciplinas disponíveis quando as cursadas mudam\n  useEffect(() => {\n    atualizarDisciplinasDisponiveis();\n    \n    // Salva no localStorage\n    localStorage.setItem('disciplinasCursadas', JSON.stringify(disciplinasCursadas));\n  }, [disciplinasCursadas]);\n\n  // Carrega as disciplinas cursadas do localStorage ao iniciar\n  useEffect(() => {\n    const savedDisciplinas = localStorage.getItem('disciplinasCursadas');\n    if (savedDisciplinas) {\n      setDisciplinasCursadas(JSON.parse(savedDisciplinas));\n    } else {\n      // Inicialmente, apenas as disciplinas sem pré-requisitos estão disponíveis\n      const inicialmenteDisponiveis = [];\n      Object.keys(disciplinasData).forEach(codigo => {\n        const disciplina = disciplinasData[codigo];\n        if (disciplina.preRequisitos.length === 0 && disciplina.coRequisitos.length === 0) {\n          inicialmenteDisponiveis.push(codigo);\n        }\n      });\n      setDisciplinasDisponiveis(inicialmenteDisponiveis);\n    }\n  }, []);\n\n  // Função para lidar com o clique em uma disciplina\n  const handleDisciplinaClick = (codigo) => {\n    if (disciplinasCursadas.includes(codigo)) {\n      // Se já está cursada, verifica se pode ser desmarcada\n      // Uma disciplina só pode ser desmarcada se nenhuma disciplina cursada depende dela\n      let podeDesmarcada = true;\n      \n      disciplinasCursadas.forEach(discCursada => {\n        if (discCursada !== codigo) {\n          const dependencias = disciplinasData[discCursada].preRequisitos;\n          if (dependencias.includes(codigo)) {\n            podeDesmarcada = false;\n          }\n        }\n      });\n      \n      if (podeDesmarcada) {\n        setDisciplinasCursadas(prev => prev.filter(disc => disc !== codigo));\n      } else {\n        alert(\"Não é possível desmarcar esta disciplina pois outras disciplinas cursadas dependem dela.\");\n      }\n    } else if (disciplinasDisponiveis.includes(codigo)) {\n      // Se está disponível, marca como cursada\n      setDisciplinasCursadas(prev => [...prev, codigo]);\n    } else {\n      // Se não está disponível, mostra os pré-requisitos faltantes ou regras especiais\n      if (codigo === 'estagio') {\n        alert(\"Para cursar Estágio Supervisionado, você precisa ter concluído pelo menos 50% da carga horária total do curso.\");\n        return;\n      }\n      \n      if (codigo === 'TCC_1') {\n        alert(\"Para cursar TCC 1, você precisa ter concluído pelo menos 70% da carga horária total do curso.\");\n        return;\n      }\n      \n      const preReqsFaltantes = disciplinasData[codigo].preRequisitos\n        .filter(preReq => !disciplinasCursadas.includes(preReq))\n        .map(preReq => disciplinasData[preReq].nome);\n      \n      const coReqsFaltantes = disciplinasData[codigo].coRequisitos\n        .filter(coReq => !disciplinasCursadas.includes(coReq) && !disciplinasDisponiveis.includes(coReq))\n        .map(coReq => disciplinasData[coReq].nome);\n      \n      let mensagem = \"Esta disciplina não está disponível. \";\n      \n      if (preReqsFaltantes.length > 0) {\n        mensagem += `\\nPré-requisitos faltantes: ${preReqsFaltantes.join(\", \")}`;\n      }\n      \n      if (coReqsFaltantes.length > 0) {\n        mensagem += `\\nCo-requisitos faltantes: ${coReqsFaltantes.join(\", \")}`;\n      }\n      \n      alert(mensagem);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Fluxograma \n        disciplinas={disciplinasData}\n        disciplinasCursadas={disciplinasCursadas}\n        disciplinasDisponiveis={disciplinasDisponiveis}\n        onDisciplinaClick={handleDisciplinaClick}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}